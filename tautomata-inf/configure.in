## $Id: configure.in 369 2011-01-06 07:53:54Z babic $

## --------------------------------------------------------------------
## SECTION 1: Initialization and setup
## --------------------------------------------------------------------

AC_PREREQ(2.64)
# Initialize autoconf
AC_INIT([[tautomata]],[m4_normalize(esyscmd(echo -n "v0.1 `date +%Y-%m-%d\ %H:%M`"))],[babic.domagoj at gmail.com])
# Use this config directory for temporary files
AC_CONFIG_AUX_DIR(config)
# Keep libtool macros in correct place
AC_CONFIG_MACRO_DIR([m4])
# Initialize automake
AM_INIT_AUTOMAKE([-Wall foreign])
# Initialize libtool
AC_PROG_LIBTOOL

## --------------------------------------------------------------------
## Section 2: Set program options
## --------------------------------------------------------------------

MYCXXFLAGS="-Wall -Wextra -pipe -ffloat-store"
MYCCFLAGS="-Wall -Wextra -pipe -ffloat-store -m32"
OPTFLAGS=""
DBGFLAGS=""

## --------------------------------------------------------------------
## SECTION 3: configure command line options
## --------------------------------------------------------------------

# Enable this for release, for debugging the default -O2 option creates
# problems.
#AC_PROG_CXX

# Enables optimized build
AC_ARG_ENABLE(optimized, AS_HELP_STRING(
[--enable-optimized, Compile with optimizations enabled (default is NO)]),,optimized="NO")

if test "x$optimized" == xNO ; then
    DBGFLAGS="-g3 -gdwarf-2"
else
    OPTFLAGS="-O3 -s"
fi

# Enables assertion checking
AC_ARG_ENABLE(assertions, AS_HELP_STRING(
[--enable-assertions, Compile with assertions enabled (default is NO)]),,assertions="NO")

if test "x$assertions" == xNO ; then
    OPTFLAGS="${OPTFLAGS} -DNDEBUG"
fi

cxxflags="${CXXFLAGS} ${MYCXXFLAGS} ${OPTFLAGS} ${DBGFLAGS}"
AC_SUBST(cxxflags)

ccflags="${CCFLAGS} ${MYCCFLAGS} ${OPTFLAGS} ${DBGFLAGS}"
AC_SUBST(ccflags)

## --------------------------------------------------------------------
## SECTION 4: Check for programs needed for build and their versions
## --------------------------------------------------------------------

if test "x$optimized" == xNO ; then
    # Graphviz used in debugging
    AC_PATH_PROG([DOT], [dot], NOT_FOUND)
    if test "x$DOT" == xNOT_FOUND ; then
        AC_MSG_ERROR([*** Graphviz and dot not found. Please install Graphviz.])
    fi
    AC_SUBST(DOT)
    # gv is used in debugging as well
    AC_PATH_PROG([GV], [gv], NOT_FOUND)
    if test "x$GV" == xNOT_FOUND ; then
        AC_MSG_ERROR([*** Ghostview not found. Please install Ghostview.])
    fi
    AC_SUBST(GV)
fi

# Finds C/C++ compilers, sets CC/CXX flags
AC_PROG_CC
AC_PROG_CXX
# Check for libtool
LT_INIT
# Test C/C++ compilers
AC_LANG(C)
AC_LANG(C++)
# Check for other programs needed for build
AC_PROG_SED
AC_PROG_GREP
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PATH_PROG([FLEX], [flex], NOT_FOUND)
AC_PATH_PROG([BISON], [bison], NOT_FOUND)
AC_PATH_PROG([TAR], [tar], NOT_FOUND)
AC_PATH_PROG([RM], [rm], NOT_FOUND)
# Error messages
if test "x$FLEX" == xNOT_FOUND ; then
    AC_MSG_ERROR([*** flex not found. Please install flex.])
fi
if test "x$BISON" == xNOT_FOUND ; then
    AC_MSG_ERROR([*** bison not found. Please install bison.])
fi
if test "x$TAR" == xNOT_FOUND ; then
    AC_MSG_ERROR([*** tar not found. Please install tar.])
fi
if test "x$RM" == xNOT_FOUND ; then
    AC_MSG_ERROR([*** rm not found. Please install rm.])
fi
# Substitutions
AC_SUBST(FLEX)
AC_SUBST(BISON)
AC_SUBST(TAR)
AC_SUBST(RM)

## --------------------------------------------------------------------
## SECTION 5: Check needed libraries and their versions
## --------------------------------------------------------------------

#AC_CHECK_LIB([gmp], [__gmpz_init], [],
#       [AC_MSG_ERROR([GNU MP not found, see http://gmplib.org/])])
#AC_CHECK_LIB([gmpxx], [__gmpz_init], [],
#     [AC_MSG_ERROR([GNU MP not found, see http://gmplib.org/])])
#AC_CHECK_LIB([z3-gmp], [Z3_check], [],
#     [AC_MSG_ERROR([Could not find z3-gmp library, see http://research.microsoft.com/en-us/um/redmond/projects/z3/])])

BOOST_REQUIRE([1.33])
BOOST_SYSTEM
BOOST_PROGRAM_OPTIONS
BOOST_FILESYSTEM
BOOST_SMART_PTR

## --------------------------------------------------------------------
## SECTION 6: Check needed headers
## --------------------------------------------------------------------

# Boost headers are checked with BOOST_ macros

AC_CHECK_HEADERS([tr1/cstdint])
AC_CHECK_HEADERS([tr1/unordered_map])
AC_CHECK_HEADERS([tr1/unordered_set])
AC_CHECK_HEADERS([tr1/random])

#AC_CHECK_HEADER([gmp.h], , [AC_MSG_ERROR([Could not find gmp.h header, see http://gmplib.org/])])
#AC_CHECK_HEADER([gmpxx.h], , [AC_MSG_ERROR([Could not find gmpxx.h header, see http://gmplib.org/])])
#AC_CHECK_HEADER([z3.h], , [AC_MSG_ERROR([Could not find z3.h header, please install Z3 http://research.microsoft.com/en-us/um/redmond/projects/z3/])])
#AC_CHECK_HEADER([zlib.h], , [AC_MSG_ERROR([Could not find zlib.h header, please install zlibg1-dev, or something similar.])])

## --------------------------------------------------------------------
## SECTION 7: Check for types and data structures
## --------------------------------------------------------------------

AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_INT8_T
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_SIZE_T
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_CHECK_TYPES([ptrdiff_t])

## --------------------------------------------------------------------
## SECTION 8: Check needed functions
## --------------------------------------------------------------------

# These are usually not needed for C++ programs. Also, they interact
# nastily with AC_CHECK_LIB: make reports that ::malloc/::realloc is
# missing. The only solution I found is either to disable these checks,
# or use:
# ac_cv_func_malloc_0_nonnull=yes ac_cv_func_realloc_0_nonnull=yes 
# before configure ./configure
#AC_FUNC_MALLOC
#AC_FUNC_MEMCMP
#AC_FUNC_REALLOC

AC_HEADER_STDC
AC_CHECK_FUNCS([getpagesize])
AC_CHECK_FUNCS([strcasecmp])

## --------------------------------------------------------------------
## SECTION 9: Specify and generate output
## --------------------------------------------------------------------

#AC_CONFIG_FILES(Makefile.setup)
AC_CONFIG_FILES([
    Makefile 
    src/Makefile
])
AC_OUTPUT
